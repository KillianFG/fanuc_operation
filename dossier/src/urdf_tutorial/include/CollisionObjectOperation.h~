 /* Auto-generated by genmsg_cpp for file /tmp/buildd/iamondback-motion-planning-common-0.3.6/debian/ros-diaack-motion-planning-common/opt/ros/diamondback stacks/n_planning_common/mapping_msgs/msg/CollisionObjectOper.msg */
 #ifndef MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION #ifndef MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION #define MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION #define MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION #include <string>
 #include <vector>
 #include <ostream>
 #include "ros/serialization.h"
 #include "ros/builtin_message_traits.h"
 #include "ros/message_operations.h"
 #include "ros/message.h"
 #include "ros/time.h"
 
 
 namespace mapping_msgs
 {
 template <class ContainerAllocator>
 struct CollisionObjectOperation_ : public ros::Messag struct CollisionObjectOperation_ : public ros::Messag {
   typedef CollisionObjectOperation_<ContainerAllocatope;
 
   CollisionObjectOperation_()
   : operation(0)
   {
   }
 
   CollisionObjectOperation_(const ContainerAllocator&oc)
   : operation(0)
   {
   }
 
   typedef int8_t _operation_type;
   int8_t operation;
 
   enum { ADD = 0 };
   enum { REMOVE = 1 };
   enum { DETACH_AND_ADD_AS_OBJECT = 2 };
   enum { ATTACH_AND_REMOVE_AS_OBJECT = 3 };
 
 private:
   static const char* __s_getDataType_() { return "mapmsgs/CollisionObjectOperation"; }
 public:
   ROS_DEPRECATED static const std::string __s_getData) { return __s_getDataType_(); }
 
   ROS_DEPRECATED const std::string __getDataType() co return __s_getDataType_(); }
 
 private:
   static const char* __s_getMD5Sum_() { return "66a2bd193145f8da8c3e401a474"; }
 public:
   ROS_DEPRECATED static const std::string __s_getMD5S{ return __s_getMD5Sum_(); }
 
   ROS_DEPRECATED const std::string __getMD5Sum() conseturn __s_getMD5Sum_(); }
 
 private:
   static const char* __s_getMessageDefinition_() { re"#Puts the object into the environment\n\
 #or updates the object if already added\n\
 byte ADD=0\n\
 \n\
 #Removes the object from the environment entirely\n\
 byte REMOVE=1\n\
 \n\
 #Only valid within the context of a CollisionAttachedt message\n\
 #Will be ignored if sent with an CollisionObject mess\
 #Takes an attached object, detaches from the attached\n\
 #But adds back in as regular object\n\
 byte DETACH_AND_ADD_AS_OBJECT=2\n\
 \n\
 #Only valid within the context of a CollisionAttachedt message\n\
 #Will be ignored if sent with an CollisionObject mess\
 #Takes current object in the environment and removes \n\
 #a regular object\n\
 byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
 \n\
 # Byte code for operation\n\
 byte operation\n\
 \n\
 "; }
 public:
   ROS_DEPRECATED static const std::string __s_getMessfinition() { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED const std::string __getMessageDefini) const { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *_ptr, uint32_t seq) const
   {
     ros::serialization::OStream stream(write_ptr, 10000);
     ros::serialization::serialize(stream, operation);     ros::serialization::serialize(stream, operation);     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint8_t *deserialize(uint8_td_ptr)
   {
     ros::serialization::IStream stream(read_ptr, 10000);
     ros::serialization::deserialize(stream, operation     ros::serialization::deserialize(stream, operation     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint32_t serializationLengthnst
   {
     uint32_t size = 0;
     size += ros::serialization::serializationLength(oion);
     return size;
   }
 
   typedef boost::shared_ptr< ::mapping_msgs::CollisioctOperation_<ContainerAllocator> > Ptr;
   typedef boost::shared_ptr< ::mapping_msgs::CollisioctOperation_<ContainerAllocator>  const> ConstPtr;
 }; // struct CollisionObjectOperation
 typedef  ::mapping_msgs::CollisionObjectOperation_<stlocator<void> > CollisionObjectOperation;
 
 typedef boost::shared_ptr< ::mapping_msgs::CollisionOOperation> CollisionObjectOperationPtr;
 typedef boost::shared_ptr< ::mapping_msgs::CollisionOOperation const> CollisionObjectOperationConstPtr;
 
 
 template<typename ContainerAllocator>
 std::ostream& operator<<(std::ostream& s, const  ::ma_msgs::CollisionObjectOperation_<ContainerAllocator> &_msgs::CollisionObjectOperation_<ContainerAllocator> & {
   ros::message_operations::Printer< ::mapping_msgs::CionObjectOperation_<ContainerAllocator> >::stream(s, ";
   return s;}
 
 } // namespace mapping_msgs
 
 namespace ros
 {
 namespace message_traits
 {
 template<class ContainerAllocator>
 struct MD5Sum< ::mapping_msgs::CollisionObjectOperationtainerAllocator> > {
   static const char* value() 
   {
     return "66a2b3b971d193145f8da8c3e401a474";
   }
 
   static const char* value(const  ::mapping_msgs::ColnObjectOperation_<ContainerAllocator> &) { return valu} 
   static const uint64_t static_value1 = 0x66a2b3b971dULL;
   static const uint64_t static_value2 = 0x5f8da8c3e40ULL;
 };
 
 template<class ContainerAllocator>
 struct DataType< ::mapping_msgs::CollisionObjectOpera<ContainerAllocator> > {
   static const char* value() 
   {
     return "mapping_msgs/CollisionObjectOperation";
   }
 
   static const char* value(const  ::mapping_msgs::ColnObjectOperation_<ContainerAllocator> &) { return valu} 
 };
 
 template<class ContainerAllocator>
 struct Definition< ::mapping_msgs::CollisionObjectOpen_<ContainerAllocator> > {
   static const char* value() 
   {
     return "#Puts the object into the environment\n\
 #or updates the object if already added\n\
 byte ADD=0\n\
 \n\
 #Removes the object from the environment entirely\n\
 byte REMOVE=1\n\
 \n\
 #Only valid within the context of a CollisionAttachedt message\n\
 #Will be ignored if sent with an CollisionObject mess\
 #Takes an attached object, detaches from the attached\n\
 #But adds back in as regular object\n\
 byte DETACH_AND_ADD_AS_OBJECT=2\n\
 \n\
 #Only valid within the context of a CollisionAttachedt message\n\
 #Will be ignored if sent with an CollisionObject mess\
 #Takes current object in the environment and removes \n\
 #a regular object\n\
 byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
 \n\
 # Byte code for operation\n\
 byte operation\n\
 \n\
 ";
   }
 
   static const char* value(const  ::mapping_msgs::ColnObjectOperation_<ContainerAllocator> &) { return valu} 
 };
 
 template<class ContainerAllocator> struct IsFixedSizeapping_msgs::CollisionObjectOperation_<ContainerAlloca> : public TrueType {};
 } // namespace message_traits
 } // namespace ros
 
 namespace ros
 {
 namespace serialization
 {
 
 template<class ContainerAllocator> struct Serializer<pping_msgs::CollisionObjectOperation_<ContainerAllocat
 {
   template<typename Stream, typename T> inline static allInOne(Stream& stream, T m)
   {
     stream.next(m.operation);
   }
 
   ROS_DECLARE_ALLINONE_SERIALIZER;
 }; // struct CollisionObjectOperation_
 } // namespace serialization
 } // namespace ros
 
 namespace ros
 {
 namespace message_operations
 {
 
 template<class ContainerAllocator>
 struct Printer< ::mapping_msgs::CollisionObjectOperatContainerAllocator> >
 {
   template<typename Stream> static void stream(Streamconst std::string& indent, const  ::mapping_msgs::CollObjectOperation_<ContainerAllocator> & v) 
   {
     s << indent << "operation: ";
     Printer<int8_t>::stream(s, indent + "  ", v.opera;
   }
 };
 
 
 } // namespace message_operations
 } // namespace ros
 
 #endif // MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATI 
 
